Skip to content
You said:
import random

def random_chromosome(size): #making random chromosomes
    return [ random.randint(1, nq) for _ in range(nq) ]

def fitness(chromosome):
    horizontal_collisions = sum([chromosome.count(queen)-1 for queen in chromosome])/2
    diagonal_collisions = 0

    n = len(chromosome)
    left_diagonal = [0] * 2*n
    right_diagonal = [0] * 2*n
    for i in range(n):
        left_diagonal[i + chromosome[i] - 1] += 1
        right_diagonal[len(chromosome) - i + chromosome[i] - 2] += 1

    diagonal_collisions = 0
    for i in range(2*n-1):
        counter = 0
        if left_diagonal[i] > 1:
            counter += left_diagonal[i]-1
        if right_diagonal[i] > 1:
            counter += right_diagonal[i]-1
        diagonal_collisions += counter / (n-abs(i-n+1))

    return int(maxFitness - (horizontal_collisions + diagonal_collisions)) #28-(2+3)=23

def probability(chromosome, fitness):
    return fitness(chromosome) / maxFitness

def random_pick(population, probabilities):
    populationWithProbabilty = zip(population, probabilities)
    total = sum(w for c, w in populationWithProbabilty)
    r = random.uniform(0, total)
    upto = 0
    for c, w in zip(population, probabilities):
        if upto + w >= r:
            return c
        upto += w
    assert False, "Shouldn't get here"

def reproduce(x, y): #doing cross_over between two chromosomes
    n = len(x)
    c = random.randint(0, n - 1)
    return x[0:c] + y[c:n]

def mutate(x):  #randomly changing the value of a random index of a chromosome
    n = len(x)
    c = random.randint(0, n - 1)
    m = random.randint(1, n)
    x[c] = m
    return x

def genetic_queen(population, fitness):
    mutation_probability = 0.03
    new_population = []
    probabilities = [probability(n, fitness) for n in population]
    for i in range(len(population)):
        x = random_pick(population, probabilities) #best chromosome 1
        y = random_pick(population, probabilities) #best chromosome 2
        child = reproduce(x, y) #creating two new chromosomes from the best 2 chromosomes
        if random.random() < mutation_probability:
            child = mutate(child)
        print_chromosome(child)
        new_population.append(child)
        if fitness(child) == maxFitness: break
    return new_population

def print_chromosome(chrom):
    print("Chromosome = {},  Fitness = {}"
        .format(str(chrom), fitness(chrom)))

if __name__ == "__main__":
    nq = int(input("Enter Number of Queens: ")) #say N = 8
    maxFitness = (nq*(nq-1))/2  # 8*7/2 = 28
    population = [random_chromosome(nq) for _ in range(100)]

    generation = 1

    while not maxFitness in [fitness(chrom) for chrom in population]:
        print("=== Generation {} ===".format(generation))
        population = genetic_queen(population, fitness)
        print("")
        print("Maximum Fitness = {}".format(max([fitness(n) for n in population])))
        generation += 1
    chrom_out = []
    print("Solved in Generation {}!".format(generation-1))
    for chrom in population:
        if fitness(chrom) == maxFitness:
            print("")
            print("One of the solutions: ")
            chrom_out = chrom
            print_chromosome(chrom)

    board = []

    for x in range(nq):
        board.append(["x"] * nq)

    for i in range(nq):
        board[nq-chrom_out[i]][i]="Q"


    def print_board(board):
        for row in board:
            print (" ".join(row))

    print()
    print_board(board)





explain the code in bangla with proper details
ChatGPT said:
এই কোডটি হলো Genetic Algorithm ব্যবহার করে N-Queens Problem সমাধানের একটি বাস্তবায়ন (implementation)। নিচে ধাপে ধাপে বাংলায় ব্যাখ্যা করা হলো:

🔍 সমস্যার সংক্ষিপ্ত বিবরণ:
N-Queens Problem: একটি N x N বোর্ডে Nটি রানী এমনভাবে বসাতে হবে যেন তারা একে অপরকে আক্রমণ করতে না পারে। অর্থাৎ, কোনো দুই রানী একই সারি, কলাম বা কর্ণে থাকতে পারবে না।

🧠 কোড বিশ্লেষণ:
✅ 1. random_chromosome(size)
return [ random.randint(1, nq) for _ in range(nq) ]
এটি একটি এলোমেলো সমাধান তৈরি করে, যেখানে একটি list থাকে nq সংখ্যক রানীর জন্য।

প্রতিটি ইন্ডেক্স বোঝায় একটি column, আর তার মান বোঝায় row।

উদাহরণ: [4, 2, 7, 3, 6, 8, 5, 1] — মানে হচ্ছে 1ম কলামে রানী আছে 4 নম্বর সারিতে, 2য় কলামে 2 নম্বর সারিতে ইত্যাদি।

✅ 2. fitness(chromosome)
return int(maxFitness - (horizontal_collisions + diagonal_collisions))
একটি chromosome (সম্ভাব্য সমাধান) কতটা ভালো তা নির্ধারণ করে।

দুটি ধরণের কনফ্লিক্ট চেক করে:

Horizontal Collisions (একই সারিতে একাধিক রানী)

Diagonal Collisions (ডান বা বাঁ কর্ণে থাকা রানী)

যত কম কনফ্লিক্ট, তত বেশি ফিটনেস।

লক্ষ্য: maxFitness = nq * (nq - 1) / 2 (কোনো কনফ্লিক্ট না থাকলে এই মান হয়)

✅ 3. probability(chromosome, fitness)
return fitness(chromosome) / maxFitness
একটি chromosome এর ফিটনেসকে মোট ফিটনেস দিয়ে ভাগ করে সম্ভাব্যতা বের করে।

✅ 4. random_pick(population, probabilities)
roulette-wheel selection অনুযায়ী এলোমেলোভাবে দুটি chromosome বেছে নেয়।

যাদের ফিটনেস বেশি, তাদের নির্বাচিত হবার সম্ভাবনা বেশি।

✅ 5. reproduce(x, y)
c = random.randint(0, n - 1)
return x[0:c] + y[c:n]
x ও y দুটি parent chromosome থেকে একটিকে কেটে অপরটির অংশ জুড়ে দেয় → crossover।

✅ 6. mutate(x)
c = random.randint(0, n - 1)
m = random.randint(1, n)
x[c] = m
return x
mutation বা হঠাৎ পরিবর্তন। একটি ইন্ডেক্সে নতুন এলোমেলো row বসানো হয়।

✅ 7. genetic_queen(population, fitness)
মূল genetic algorithm ফাংশন।

প্রতিটি প্রজন্মে:

ভাল দুটি chromosome বেছে নেয়

তাদের crossover করে child তৈরি করে

সম্ভব হলে mutation করে

ফিটনেস ভালো child থাকলে সংরক্ষণ করে

লক্ষ্য: এমন একটা সমাধান পাওয়া যার ফিটনেস maxFitness এর সমান।

✅ 8. print_chromosome(chrom)
print("Chromosome = {},  Fitness = {}".format(str(chrom), fitness(chrom)))
প্রতিটি chromosome এবং তার ফিটনেস প্রিন্ট করে।

🔄 মূল Execution Flow:
while not maxFitness in [fitness(chrom) for chrom in population]:
যতক্ষণ পর্যন্ত perfect সমাধান (maximum fitness) না পাওয়া যায়, ততক্ষণ loop চলে।

🏁 সমাধান পাওয়ার পর:
for i in range(nq):
    board[nq - chrom_out[i]][i] = "Q"
পাওয়া গিয়েছে এমন একটি সমাধানকে chessboard আকারে দেখায়। রানী বসানো হয় Q দিয়ে।

🖨️ চূড়ান্ত বোর্ড প্রিন্ট:
def print_board(board):
    for row in board:
        print(" ".join(row))
প্রতিটি সারি আলাদাভাবে প্রিন্ট করে বোর্ড আকারে দেখায়।

🧪 উদাহরণ ইনপুট-আউটপুট:
Input:

Enter Number of Queens: 8
Output (সংক্ষেপ):

Solved in Generation 4!
One of the solutions:
Chromosome = [1, 5, 8, 6, 3, 7, 2, 4],  Fitness = 28
Q x x x x x x x
x x x x Q x x x
x x x x x x x Q
x x x x x Q x x
x x Q x x x x x
x x x x x x Q x
x Q x x x x x x
x x x Q x x x x
✅ সংক্ষেপে:
এই প্রোগ্রামটি Genetic Algorithm ব্যবহার করে ধাপে ধাপে সমাধান তৈরি করে এবং ধীরে ধীরে ভালো সমাধানের দিকে অগ্রসর হয়। অবশেষে, এটি একটি সমাধান খুঁজে বের করে যেখানে Nটি রানী একে অপরকে আক্রমণ করে না।

আপনি চাইলে এই কোডে GUI visualization, অপ্টিমাইজড মিউটেশন বা অন্য fitness ফাংশন যুক্ত করতে পারেন।
আপনি কী এই কোডে কোনো নির্দিষ্ট অংশে পরিবর্তন বা উন্নয়ন করতে চান?

You said:
Single Point Crossover in Genetic Algorithm – Python
Last Updated : 06 May, 2025
Single Point Crossover is a method used in a technique called genetic algorithms which are inspired by how living things pass on their traits to their children. Just like in nature where a child gets some traits from the mother and some from the father this method mixes two “parent solutions” to create new ones. This helps us to create better and stronger solutions by combining good parts from different options. There are four key steps in single point crossover:

Select Parents : Choose two parent chromosomes from population.
Choose a Crossover Point : Randomly select a position in chromosome.
Perform Crossover : Swaps the segments of parents after the crossover point to create two offspring.
Generate Offspring : Add new offspring to next generation.
This method ensures diversity in the population while preserving some genetic

def single_point_crossover(parent1, parent2):

    if len(parent1) != len(parent2):
        raise ValueError("Parents must have the same length.")

    crossover_point = random.randint(1, len(parent1) - 1)

    offspring1 = parent1[:crossover_point] + parent2[crossover_point:]
    offspring2 = parent2[:crossover_point] + parent1[crossover_point:]
    
    return offspring1, offspring2

parent1 = [1, 0, 1, 1, 0]
parent2 = [0, 1, 0, 1, 1]

offspring1, offspring2 = single_point_crossover(parent1, parent2)
print("Offspring 1:", offspring1)
print("Offspring 2:", offspring2)

explain these also
ChatGPT said:
চলুন এখন Single Point Crossover এর ধারণা ও Python কোডটি বাংলায় সহজভাবে ব্যাখ্যা করি।

🧬 Single Point Crossover (একক বিন্দু ক্রসওভার) কী?
Single Point Crossover হলো Genetic Algorithm-এর একটি গুরুত্বপূর্ণ অংশ, যেখানে দুইটি parent (অভিভাবক সমাধান) থেকে নতুন offspring (সন্তান) তৈরি করা হয়।

যেমন প্রকৃতিতে সন্তান মা-বাবা থেকে বৈশিষ্ট্য পায়, তেমনিভাবে এই পদ্ধতিতে এক parent-এর কিছু অংশ ও অপর parent-এর কিছু অংশ মিলিয়ে নতুন সমাধান তৈরি করা হয়।

🔑 গুরুত্বপূর্ণ ধাপগুলো:
Select Parents (প্যারেন্ট নির্বাচন):
এলোমেলোভাবে দুইটি parent chromosome বেছে নেওয়া হয়।

Choose a Crossover Point (একটি ক্রসওভার পয়েন্ট নির্বাচন):
একটি index (স্থান) বেছে নেওয়া হয় যেখানে বিভাজন করা হবে।

Perform Crossover (ক্রসওভার সম্পন্ন):
সেই index পর্যন্ত প্রথম parent-এর অংশ নেওয়া হয় এবং তারপর দ্বিতীয় parent-এর বাকি অংশ জোড়া হয়।

Generate Offspring (সন্তান তৈরি):
দুইটি offspring তৈরি হয় (parent1+parent2 এবং parent2+parent1 স্টাইল)।

✅ কোড বিশ্লেষণ
def single_point_crossover(parent1, parent2):
    if len(parent1) != len(parent2):
        raise ValueError("Parents must have the same length.")
প্রথমে দেখা হয় parent1 ও parent2 একই দৈর্ঘ্যের কিনা।

যদি না হয়, তাহলে error দেখায় কারণ একই সাইজ না হলে একসাথে মিলিয়ে offspring তৈরি করা যাবে না।

    crossover_point = random.randint(1, len(parent1) - 1)
১ থেকে len(parent1)-1 এর মধ্যে একটি random index নির্বাচন করা হয় যেখানে crossover হবে।

0 নেয় না কারণ সেটি মানে পুরো parent2 নিয়ে নেওয়া, যা অবাঞ্ছিত।

    offspring1 = parent1[:crossover_point] + parent2[crossover_point:]
    offspring2 = parent2[:crossover_point] + parent1[crossover_point:]
offspring1: parent1-এর শুরু থেকে crossover point পর্যন্ত + parent2-এর বাকি অংশ।

offspring2: উল্টোভাবে করা হয়।

🧪 উদাহরণ
parent1 = [1, 0, 1, 1, 0]
parent2 = [0, 1, 0, 1, 1]
ধরা যাক random crossover point হয় 2, তাহলে:

offspring1 = parent1[:2] + parent2[2:]
= [1, 0] + [0, 1, 1] = [1, 0, 0, 1, 1]

offspring2 = parent2[:2] + parent1[2:]
= [0, 1] + [1, 1, 0] = [0, 1, 1, 1, 0]

🖨️ Output হতে পারে:
Offspring 1: [1, 0, 0, 1, 1]
Offspring 2: [0, 1, 1, 1, 0]
🎯 উপসংহার:
Single Point Crossover সহজ কিন্তু কার্যকরী একটি পদ্ধতি Genetic Algorithm-এ।

এটি parent-এর ভাল দিকগুলো offspring-এ নিয়ে আসে এবং নতুন বৈচিত্র্য তৈরি করে।

Genetic diversity বজায় রাখতে এবং আরও ভালো সমাধানে পৌঁছাতে এই crossover পদ্ধতি গুরুত্বপূর্ণ।

আপনি কি চান এই ক্রসওভারটিকে আপনার N-Queens কোডের মধ্যে ব্যবহার করে দেখাই?

You said:
def single_point_crossover(parent1, parent2):

    if len(parent1) != len(parent2):
        raise ValueError("Parents must have the same length.")

    crossover_point = random.randint(1, len(parent1) - 1)

    offspring1 = parent1[:crossover_point] + parent2[crossover_point:]
    offspring2 = parent2[:crossover_point] + parent1[crossover_point:]
    
    return offspring1, offspring2

parent1 = [1, 0, 1, 1, 0]
parent2 = [0, 1, 0, 1, 1]

offspring1, offspring2 = single_point_crossover(parent1, parent2)
print("Offspring 1:", offspring1)
print("Offspring 2:", offspring2)

PS C:\projects\Python\py practice> python -u "c:\projects\Python\py practice\singlePointGA.py"
Traceback (most recent call last):
  File "c:\projects\Python\py practice\singlePointGA.py", line 16, in <module>
    offspring1, offspring2 = single_point_crossover(parent1, parent2)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\projects\Python\py practice\singlePointGA.py", line 6, in single_point_crossover
    crossover_point = random.randint(1, len(parent1) - 1)
                      ^^^^^^
NameError: name 'random' is not defined. Did you forget to import 'random'?
ChatGPT said:
তোমার কোডে NameError: name 'random' is not defined এই ত্রুটির মানে হলো তুমি random মডিউলটি import করো নাই। Python-এ যখনই তুমি random.randint() বা অন্য কোনো random ফাংশন ব্যবহার করো, তখন অবশ্যই উপরে import random লিখে দিতে হয়।

✅ ঠিক করার উপায়
তোমার কোডের একদম শুরুতে (line 1 এ) নিচের লাইনটি যোগ করো:

import random
🔧 সম্পূর্ণ সংশোধিত কোড:
import random  # এই লাইনটি যোগ করতে ভুলে গেছো

def single_point_crossover(parent1, parent2):
    if len(parent1) != len(parent2):
        raise ValueError("Parents must have the same length.")

    crossover_point = random.randint(1, len(parent1) - 1)

    offspring1 = parent1[:crossover_point] + parent2[crossover_point:]
    offspring2 = parent2[:crossover_point] + parent1[crossover_point:]
    
    return offspring1, offspring2

parent1 = [1, 0, 1, 1, 0]
parent2 = [0, 1, 0, 1, 1]

offspring1, offspring2 = single_point_crossover(parent1, parent2)
print("Offspring 1:", offspring1)
print("Offspring 2:", offspring2)
এখন এই কোডটি চলবে ঠিকভাবে এবং এলোমেলোভাবে একটি crossover point নিয়ে offspring তৈরি করবে।

তুমি কি চাও এই crossover পদ্ধতি integrate করে দেই তোমার N-Queens genetic algorithm-এ?

You said:
2. Mutation (Code Segment) ->  

def mutate(offspring):    """Applies mutation to the offspring"""
    mutation_rate = 0.01 # Adjust mutation rate as needed
    mutated_offspring = []
    for individual in offspring:
        mutated_individual = individual.copy() # Avoid modifying the original
        for gene_index in range(len(individual)):
            if random.random() < mutation_rate:
                mutated_individual[gene_index] = random.randint(0, 1) #Example: flipping a bit for binary genes
        mutated_offspring.append(mutated_individual)
    return mutated_offspring

ChatGPT said:
চলুন এখন এই mutate ফাংশনের ব্যাখ্যাটি বাংলায় ধাপে ধাপে করি:

🧬 Mutation (রূপান্তর) কী?
Genetic Algorithm-এ mutation হলো এমন একটি ধাপ যেখানে offspring (সন্তান সমাধান)-এর মধ্যে ছোটখাটো পরিবর্তন করা হয়।
👉 এর উদ্দেশ্য হলো population-এ বৈচিত্র্য (diversity) বজায় রাখা যাতে algorithm local optimum-এ আটকে না যায়।

✅ কোড ব্যাখ্যা:
def mutate(offspring):
    """Applies mutation to the offspring"""
এই ফাংশনটি একটি offspring list নেয় এবং প্রত্যেক offspring-এ কিছু mutation প্রয়োগ করে।

    mutation_rate = 0.01 # Adjust mutation rate as needed
mutation_rate = 1%, অর্থাৎ প্রতিটি gene-এর মাত্র 1% সম্ভাবনা আছে পরিবর্তিত হওয়ার।

    mutated_offspring = []
নতুন mutated offspring গুলো রাখার জন্য একটি খালি list তৈরি করা হয়েছে।

    for individual in offspring:
        mutated_individual = individual.copy() # Avoid modifying the original
প্রতিটি offspring-এর জন্য:

একটি copy তৈরি করা হচ্ছে যাতে মূলটা পরিবর্তন না হয়।

        for gene_index in range(len(individual)):
            if random.random() < mutation_rate:
                mutated_individual[gene_index] = random.randint(0, 1) 
প্রতিটি gene-এর জন্য (যেমন: binary bit, বা একটি value):

random.random() একটি সংখ্যা দেয় 0.0 থেকে 1.0 এর মধ্যে।

যদি তা mutation rate-এর কম হয় (যেমন 0.007 < 0.01), তাহলে:

সেই gene-টি বদলে দেওয়া হয় 0 অথবা 1 দিয়ে।

অর্থাৎ bit flip হয়।

        mutated_offspring.append(mutated_individual)
mutated individual-টি লিস্টে যোগ করা হয়।

    return mutated_offspring
সবগুলো mutation সম্পন্ন হলে সেটি return করে।

🔄 উদাহরণ:
ধরা যাক:

offspring = [[1, 0, 1, 1, 0], [0, 1, 1, 0, 1]]
Mutation rate 0.01 হলে, প্রতিটি bit-এর মাত্র 1% সম্ভাবনায় flip হবে।
কোনো mutation না-ও ঘটতে পারে। আবার 1টি বা 2টি bit বদলাতে পারে।

🔧 গুরুত্বপূর্ণ:
Binary chromosome-এ যেমন random.randint(0, 1) ঠিক আছে।

কিন্তু যদি chromosome-এর gene অন্য ধরনের হয় (যেমন N-Queens problem এ 1 থেকে N পর্যন্ত সংখ্যায়), তাহলে mutation ফাংশনে একটু ভিন্নভাবে করতে হবে।

তুমি কি এই mutation ফাংশনটিকে N-Queens এর মতো non-binary chromosome-এর জন্য পরিবর্তন করে দিতে চাও?

You said:
give me full code and explain it 
ChatGPT said:
Certainly! Here's the full working code for a Genetic Algorithm that uses single-point crossover and mutation (with adjustable mutation rate), suitable for binary chromosomes like [0, 1, 1, 0, 1].

✅ Full Code: Genetic Algorithm with Single-Point Crossover & Mutation
import random

# ----- Create Initial Population -----
def generate_population(pop_size, chromosome_length):
    return [[random.randint(0, 1) for _ in range(chromosome_length)] for _ in range(pop_size)]

# ----- Fitness Function -----
def fitness(chromosome):
    # Example: maximize number of 1s (simple problem)
    return sum(chromosome)

# ----- Selection: Roulette Wheel Selection -----
def select_parent(population, fitnesses):
    total_fitness = sum(fitnesses)
    pick = random.uniform(0, total_fitness)
    current = 0
    for individual, fit in zip(population, fitnesses):
        current += fit
        if current >= pick:
            return individual
    return population[-1]

# ----- Single Point Crossover -----
def single_point_crossover(parent1, parent2):
    if len(parent1) != len(parent2):
        raise ValueError("Parents must have the same length.")
    crossover_point = random.randint(1, len(parent1) - 1)
    offspring1 = parent1[:crossover_point] + parent2[crossover_point:]
    offspring2 = parent2[:crossover_point] + parent1[crossover_point:]
    return offspring1, offspring2

# ----- Mutation -----
def mutate(offspring, mutation_rate=0.01):
    mutated_offspring = []
    for individual in offspring:
        mutated = individual.copy()
        for i in range(len(mutated)):
            if random.random() < mutation_rate:
                mutated[i] = 1 - mutated[i]  # Flip bit
        mutated_offspring.append(mutated)
    return mutated_offspring

# ----- Genetic Algorithm Main Function -----
def genetic_algorithm(pop_size=10, chromosome_length=8, generations=50, mutation_rate=0.01):
    population = generate_population(pop_size, chromosome_length)
    best_solution = None

    for gen in range(generations):
        print(f"\n--- Generation {gen + 1} ---")
        fitnesses = [fitness(ind) for ind in population]
        max_fit = max(fitnesses)
        best_solution = population[fitnesses.index(max_fit)]
        print(f"Best Fitness: {max_fit}, Chromosome: {best_solution}")

        new_population = []
        while len(new_population) < pop_size:
            # Selection
            parent1 = select_parent(population, fitnesses)
            parent2 = select_parent(population, fitnesses)

            # Crossover
            child1, child2 = single_point_crossover(parent1, parent2)

            # Mutation
            children = mutate([child1, child2], mutation_rate)

            new_population.extend(children)

        population = new_population[:pop_size]

    print(f"\n✅ Final Best Solution: {best_solution}, Fitness: {fitness(best_solution)}")

# Run the algorithm
genetic_algorithm()
📘 Explanation in Bengali:
1. Initial Population Generation
generate_population(pop_size, chromosome_length)
একটি population তৈরি করে, যেখানে প্রতিটি individual একটি binary chromosome (যেমন [0, 1, 1, 0, 1, 0, 1, 1])।

2. Fitness Function
def fitness(chromosome): return sum(chromosome)
এখানে fitness হিসাব করা হয় total 1 সংখ্যা দিয়ে। যত বেশি 1, তত ভালো।

3. Parent Selection
select_parent(population, fitnesses)
Roulette wheel method: বেশি fitness থাকলে parent হওয়ার সম্ভাবনাও বেশি।

4. Single Point Crossover
single_point_crossover(parent1, parent2)
দুইটি parent এর মাঝখানে একটি random crossover point নেয় এবং সেই বিন্দু থেকে দুইটি offspring তৈরি করে।

উদাহরণ:

parent1 = [1, 0, 1, 1, 0]
parent2 = [0, 1, 0, 1, 1]
crossover_point = 2

offspring1 = [1, 0] + [0, 1, 1] = [1, 0, 0, 1, 1]
offspring2 = [0, 1] + [1, 1, 0] = [0, 1, 1, 1, 0]
5. Mutation
mutate(offspring, mutation_rate=0.01)
প্রতিটি bit 1% সম্ভাবনায় flip হয়। যেমন 1 → 0, অথবা 0 → 1।

6. Loop Over Generations
for gen in range(generations):
প্রতিটি generation এ নতুন population তৈরি হয়:

Selection → Crossover → Mutation

সর্বোচ্চ fitness সহ chromosome track করা হয়।

🎯 Output Example:
--- Generation 1 ---
Best Fitness: 6, Chromosome: [1, 1, 0, 1, 1, 0, 1, 1]

...

✅ Final Best Solution: [1, 1, 1, 1, 1, 1, 1, 1], Fitness: 8
✏️ চাইলে তুমি এই GA-কে নিজের সমস্যা অনুযায়ী কাস্টমাইজ করতে পারো:
fitness() ফাংশন পরিবর্তন করে নতুন লক্ষ্য দেওয়া,

Binary এর বদলে অন্যান্য ধরনের gene ব্যবহার করা (যেমন N-Queens এর মতো সংখ্যা),

বা mutation rate বাড়ানো/কমানো।

তুমি কি এখন এই genetic algorithm কে N-Queens problem এর জন্য পরিবর্তন করে দেখতে চাও?

You said:
banglay bujao
ChatGPT said:
নিশ্চিতভাবে! নিচে আমি উপরের Genetic Algorithm কোড-এর প্রতিটি অংশ বাংলায় বিস্তারিতভাবে ব্যাখ্যা করেছি:

🔢 কোডের উদ্দেশ্য:
এই কোডটা একটা সাধারণ Genetic Algorithm (GA) বাস্তবায়ন করে, যেটা binary chromosome নিয়ে কাজ করে — যেমন: [0, 1, 1, 0, 1]। এর লক্ষ্য হচ্ছে এমন একটি chromosome খুঁজে বের করা যেখানে সব gene 1 (যেমন [1, 1, 1, 1, 1, 1, 1, 1])।

🔧 ধাপভিত্তিক ব্যাখ্যা:
১. Initial Population তৈরি (শুরুতে কিছু সমাধান বানানো):
def generate_population(pop_size, chromosome_length):
    return [[random.randint(0, 1) for _ in range(chromosome_length)] for _ in range(pop_size)]
👉 ধরো তুমি ১০টা সমাধান (population) নিতে চাও, প্রতিটা সমাধান ৮টা বিট নিয়ে তৈরি। যেমন:
[1, 0, 1, 1, 0, 0, 1, 1]
এভাবে অনেকগুলো random সমাধান বানায়।

২. Fitness





Search

Reason

Deep research

Create image



No file chosenNo file chosen
ChatGPT can make mistakes. Check important info.
